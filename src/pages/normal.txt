import React, { useState, useEffect } from "react";
import { auth, db } from "../firebaseConfig";
import { signOut } from "firebase/auth";
import { collection, addDoc, getDocs } from "firebase/firestore";
import { useNavigate } from "react-router-dom";

const Dashboard = () => {
  const navigate = useNavigate();
  const [darkMode, setDarkMode] = useState(localStorage.getItem("darkMode") === "true");
  const [userName, setUserName] = useState("");
  const [projects, setProjects] = useState([]);
  const [newProject, setNewProject] = useState({ name: "", description: "" });
  const [newMember, setNewMember] = useState("");
  const [members, setMembers] = useState([]);
  const [resources, setResources] = useState([]);
  const [newResource, setNewResource] = useState("");
  const [chatMessages, setChatMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");

  useEffect(() => {
    localStorage.setItem("darkMode", darkMode);
    document.documentElement.classList.toggle("dark", darkMode);

    if (auth.currentUser) {
      setUserName(auth.currentUser.displayName || "User");
    }

    fetchMembers(); // Fetch members from Firestore on component load
  }, [darkMode]);

  const handleLogout = async () => {
    await signOut(auth);
    navigate("/login");
  };

  const handleCreateProject = async () => {
    if (!newProject.name.trim()) return;
    const projectRef = collection(db, "projects");
    await addDoc(projectRef, newProject);
    setProjects([...projects, newProject]);
    setNewProject({ name: "", description: "" });
  };

  // Fetch members from Firestore
  const fetchMembers = async () => {
    const membersRef = collection(db, "members");
    const snapshot = await getDocs(membersRef);
    const membersList = snapshot.docs.map((doc) => doc.data().name);
    setMembers(membersList);
  };

  // Add member to Firestore
  const handleAddMember = async () => {
    if (!newMember.trim()) return;
    
    const membersRef = collection(db, "members");
    await addDoc(membersRef, { name: newMember });
    
    setMembers([...members, newMember]); // Update local state
    setNewMember(""); // Clear input field
  };

  const handleAddResource = () => {
    if (!newResource.trim()) return;
    setResources([...resources, newResource]);
    setNewResource("");
  };

  const handleSendMessage = () => {
    if (!newMessage.trim()) return;
    setChatMessages([...chatMessages, { sender: userName, text: newMessage }]);
    setNewMessage("");
  };

  return (
    <div className={`min-h-screen ${darkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-black"}`}>
      {/* Navbar */}
      <nav className="bg-primary p-4 flex justify-between items-center shadow-md">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-gray-300 dark:bg-gray-700 rounded-full flex items-center justify-center text-xl">
            👤
          </div>
          <h2 className="text-xl font-semibold">{userName}</h2>
        </div>

        <div className="flex items-center gap-4">
          <button onClick={() => setDarkMode(!darkMode)} className="px-4 py-2 bg-secondary text-white rounded-lg hover:scale-105">
            {darkMode ? "🌞 Light Mode" : "🌙 Dark Mode"}
          </button>
          <button onClick={handleLogout} className="bg-red-500 px-4 py-2 text-white rounded-lg hover:scale-105">
            Logout
          </button>
        </div>
      </nav>

      {/* Main Content */}
      <div className="grid md:grid-cols-4 min-h-screen">
        {/* Sidebar */}
        <aside className="bg-gray-200 dark:bg-gray-800 p-4 min-h-screen">
          <h3 className="text-lg font-bold">📂 Project Manager</h3>
          <ul className="mt-4 space-y-3">
            <li className="p-2 bg-gray-300 dark:bg-gray-700 rounded-md cursor-pointer hover:bg-gray-400 dark:hover:bg-gray-600">📁 Create Project</li>
            <li className="p-2 bg-gray-300 dark:bg-gray-700 rounded-md cursor-pointer hover:bg-gray-400 dark:hover:bg-gray-600">👥 Add Members</li>
            <li className="p-2 bg-gray-300 dark:bg-gray-700 rounded-md cursor-pointer hover:bg-gray-400 dark:hover:bg-gray-600">📑 Resources</li>
            <li className="p-2 bg-gray-300 dark:bg-gray-700 rounded-md cursor-pointer hover:bg-gray-400 dark:hover:bg-gray-600">📊 Progress</li>
            <li className="p-2 bg-gray-300 dark:bg-gray-700 rounded-md cursor-pointer hover:bg-gray-400 dark:hover:bg-gray-600">💬 Chats</li>
          </ul>
        </aside>

        {/* Main Section */}
        <main className="p-6 col-span-3">
          {/* Create Project */}
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md mb-6">
            <h2 className="text-xl font-bold mb-2">📁 Create a New Project</h2>
            <input
              type="text"
              placeholder="Project Name"
              className="w-full p-2 border rounded-md dark:bg-gray-700 mb-2"
              value={newProject.name}
              onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}
            />
            <textarea
              placeholder="Project Description"
              className="w-full p-2 border rounded-md dark:bg-gray-700"
              value={newProject.description}
              onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}
            ></textarea>
            <button className="mt-2 px-4 py-2 bg-primary text-white rounded-md hover:scale-105" onClick={handleCreateProject}>
              Create
            </button>
          </div>

          {/* Add Members (Updated) */}
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md mb-6">
            <h2 className="text-xl font-bold mb-2">👥 Add Members</h2>
            <input
              type="text"
              placeholder="Member Name"
              className="w-full p-2 border rounded-md dark:bg-gray-700 mb-2"
              value={newMember}
              onChange={(e) => setNewMember(e.target.value)}
            />
            <button className="px-4 py-2 bg-primary text-white rounded-md hover:scale-105" onClick={handleAddMember}>
              Add
            </button>
            <ul className="mt-2">
              {members.map((member, index) => (
                <li key={index} className="p-2 border-b dark:border-gray-600">{member}</li>
              ))}
            </ul>
          </div>

          {/* Chat */}
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-bold mb-2">💬 Team Chat</h2>
            <div className="h-40 overflow-auto p-2 bg-gray-300 dark:bg-gray-700 rounded-md mb-2">
              {chatMessages.map((msg, index) => (
                <p key={index}><strong>{msg.sender}:</strong> {msg.text}</p>
              ))}
            </div>
            <input
              type="text"
              placeholder="Type a message..."
              className="w-full p-2 border rounded-md dark:bg-gray-700"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
            />
            <button className="mt-2 px-4 py-2 bg-primary text-white rounded-md hover:scale-105" onClick={handleSendMessage}>
              Send
            </button>
          </div>
        </main>
      </div>
    </div>
  );
};

export default Dashboard;
